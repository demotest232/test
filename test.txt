 @Test
    void testFetchPropertiesByAuditEventIdReturnsList() throws Exception {
        daoImpl.setTableName("audit_event_property");
        when(connectionHolder.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);

        // Simulate two rows in result
        when(resultSet.next()).thenReturn(true, true, false);
        when(resultSet.getLong("propertyId")).thenReturn(101L, 102L);
        when(resultSet.getLong("auditEventId")).thenReturn(123L, 124L);
        when(resultSet.getString("propertyName")).thenReturn("A", "B");
        when(resultSet.getString("propertyValue")).thenReturn("V1", "V2");

        // Stub createAuditEventProperty(ResultSet) if needed, or let DAO handle it

        List<AuditEventProperty> result = daoImpl.fetchPropertiesByAuditEventId(123L);

        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("A", result.get(0).getPropertyName());
        assertEquals("B", result.get(1).getPropertyName());
    }

    @Test
    void testFetchPropertiesByAuditEventIdReturnsEmpty() throws Exception {
        daoImpl.setTableName("audit_event_property");
        when(connectionHolder.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);

        when(resultSet.next()).thenReturn(false);  // no rows

        List<AuditEventProperty> result = daoImpl.fetchPropertiesByAuditEventId(999L);

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
