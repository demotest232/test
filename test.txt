 @Test
    void testBuild_withAllOperationTypes() {
        // Arrange
        Map<String, List<List<Object>>> deleteQueries = new HashMap<>();
        deleteQueries.put("DELETE FROM table WHERE id=?", List.of(List.of(1)));

        Map<String, List<List<Object>>> updateQueries = new HashMap<>();
        updateQueries.put("UPDATE table SET name=? WHERE id=?", List.of(List.of("John", 1)));

        Map<String, List<List<Object>>> addQueries = new HashMap<>();
        addQueries.put("INSERT INTO table (id, name) VALUES (?, ?)", List.of(List.of(2, "Jane")));

        // Simulate sqlQueries field
        builder.sqlQueries.put(OperationTypeEnum.DELETE, deleteQueries);
        builder.sqlQueries.put(OperationTypeEnum.UPDATE, updateQueries);
        builder.sqlQueries.put(OperationTypeEnum.ADD, addQueries);

        // Act
        var result = builder.build();

        // Assert
        assertNotNull(result);
        assertEquals(3, result.size(), "Should have 3 results total (1 per query type)");
        assertTrue(result.stream().anyMatch(r -> r.getSql().startsWith("DELETE")), "Should contain DELETE query");
        assertTrue(result.stream().anyMatch(r -> r.getSql().startsWith("UPDATE")), "Should contain UPDATE query");
        assertTrue(result.stream().anyMatch(r -> r.getSql().startsWith("INSERT")), "Should contain INSERT query");
    }

    @Test
    void testBuild_withNoQueries() {
        // Act
        var result = builder.build();

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty(), "Result should be empty when no queries exist");
    }
