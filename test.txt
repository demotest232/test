import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class OnBehalfOfHttpUserNameServiceTest {
    private OnBehalfOfHttpUserNameService service;
    private HttpServletRequest mockRequest;
    private RequestScopedString mockOverride;

    @BeforeEach
    void setUp() {
        service = new OnBehalfOfHttpUserNameService();
        mockRequest = mock(HttpServletRequest.class);
        mockOverride = mock(RequestScopedString.class);
    }

    @Test
    void testSetAndGetTechnicalUsers_Null() {
        service.setTechnicalUsers(null);
        assertNull(service.getTechnicalUsers());
    }

    @Test
    void testSetAndGetTechnicalUsers_NotNull() {
        service.setTechnicalUsers(Arrays.asList("user1", "user2"));
        assertTrue(service.getTechnicalUsers().contains("user1"));
    }

    @Test
    void testSetAndGetHttpRequest() {
        service.setHttpRequest(mockRequest);
        assertSame(mockRequest, service.getHttpRequest());
    }

    @Test
    void testSetAndGetOverridden() {
        service.setOverriden(mockOverride);
        assertSame(mockOverride, service.getOverriden());
    }

    @Test
    void testGetUserName_TechnicalUsersNull() {
        service.setTechnicalUsers(null);
        service.setHttpRequest(mockRequest);
        service.setOverriden(mockOverride);
        when(mockRequest.getRemoteUser()).thenReturn("testUser");
        when(mockOverride.getValue()).thenReturn("onBehalf");
        assertEquals("testUser", service.getUserName());
    }

    @Test
    void testGetUserName_TechnicalUsersNoMatch() {
        service.setTechnicalUsers(Collections.singletonList("otherUser"));
        service.setHttpRequest(mockRequest);
        service.setOverriden(mockOverride);
        when(mockRequest.getRemoteUser()).thenReturn("testUser");
        when(mockOverride.getValue()).thenReturn("onBehalf");
        assertEquals("testUser", service.getUserName());
    }

    @Test
    void testGetUserName_OnBehalfOfNullOrEmpty() {
        service.setTechnicalUsers(Collections.singletonList("testUser"));
        service.setHttpRequest(mockRequest);
        service.setOverriden(mockOverride);
        when(mockRequest.getRemoteUser()).thenReturn("testUser");
        when(mockOverride.getValue()).thenReturn(null);
        assertEquals("testUser", service.getUserName());

        when(mockOverride.getValue()).thenReturn("");
        assertEquals("testUser", service.getUserName());
    }

    @Test
    void testGetUserName_ValidOverride() {
        service.setTechnicalUsers(Collections.singletonList("testUser"));
        service.setHttpRequest(mockRequest);
        service.setOverriden(mockOverride);
        when(mockRequest.getRemoteUser()).thenReturn("testUser");
        when(mockOverride.getValue()).thenReturn("onBehalfOfUser");
        assertEquals("onBehalfOfUser", service.getUserName());
    }
}
