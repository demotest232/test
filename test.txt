import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class RequestExecutionTrackerTest {

    private RequestExecutionTracker tracker;
    private PlainTimeTracker timeTracker;

    @BeforeEach
    void setUp() {
        tracker = new RequestExecutionTracker();
        timeTracker = mock(PlainTimeTracker.class);
       
        tracker.timeTracker = timeTracker; 
    }

    @Test
    void testDestroySetsTimeTrackerNull() {
        tracker.destroy();
        assertNull(tracker.timeTracker);
    }

    @Test
    void testDoFilterNormalExecution() throws Exception {
        ServletRequest req = mock(HttpServletRequest.class);
        ServletResponse res = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);

       
        when(((HttpServletRequest) req).getParameter("uuid")).thenReturn("my-uuid");
        when(req instanceof HttpServletRequest).thenReturn(true);

        tracker.doFilter(req, res, chain);

        verify(chain).doFilter(req, res);
       
    }

    @Test
    void testPreProcessWithUuid() throws Exception {
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("uuid")).thenReturn("uuidValue");

      
        tracker.timeTracker = timeTracker;
        TrackingContext context = tracker.preProcess(req);

        verify(timeTracker).startLog(anyString(), eq("uuidValue"));
        assertNotNull(context);
    }

    @Test
    void testPreProcessWithoutUuid() throws Exception {
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("uuid")).thenReturn(null);

        tracker.timeTracker = timeTracker;
        TrackingContext context = tracker.preProcess(req);

        verify(timeTracker).startLog(anyString());
        assertNotNull(context);
    }
}
