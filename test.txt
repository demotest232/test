public List<String> getDiffFiles(String[] tags,
                                 String compPath,
                                 List<String> filesAdded,
                                 final String[] excludedFolders) throws IOException {

    List<String> filesModified = new ArrayList<>();

    // Get repo
    GHRepository repo = gitUtil.getRepository();

    // Get tree for both tags
    GHTree tree1 = repo.getTreeRecursive(tags[0], 1); // base tag
    GHTree tree2 = repo.getTreeRecursive(tags[1], 1); // compare tag

    // Collect file paths
    Set<String> filesInTag1 = tree1.getTree().stream()
            .map(GHTreeEntry::getPath)
            .collect(Collectors.toSet());

    Set<String> filesInTag2 = tree2.getTree().stream()
            .map(GHTreeEntry::getPath)
            .collect(Collectors.toSet());

    // Added files (in tag2 but not tag1)
    Set<String> added = new HashSet<>(filesInTag2);
    added.removeAll(filesInTag1);

    // Removed files (in tag1 but not tag2)
    Set<String> removed = new HashSet<>(filesInTag1);
    removed.removeAll(filesInTag2);

    // Modified (present in both â†’ you can refine by hash comparison)
    Set<String> modified = new HashSet<>(filesInTag1);
    modified.retainAll(filesInTag2);

    // Apply excluded folder logic + fill lists
    for (String filePath : added) {
        if (!isExcluded(filePath, excludedFolders)) {
            if (filesAdded != null) {
                filesAdded.add(trimPath(filePath));
            }
        }
    }

    for (String filePath : modified) {
        if (!isExcluded(filePath, excludedFolders)) {
            filesModified.add(trimPath(filePath));
        }
    }

    // We skip removed files here (you can add if needed)

    return filesModified;
}

// Helper: exclude check
private boolean isExcluded(String filePath, String[] excludedFolders) {
    if (excludedFolders == null) return false;
    for (String folder : excludedFolders) {
        if (filePath.contains(folder)) {
            return true;
        }
    }
    return false;
}

// Helper: trim path like your GitLab code
private String trimPath(String filePath) {
    if (filePath.contains("Packages")) {
        return null; // skip
    } else if (filePath.contains("Grants")) {
        return filePath;
    } else {
        return filePath.length() > 19 ? filePath.substring(19) : filePath;
    }
}
