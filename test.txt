@Test
void testLogEventSQLExceptionBranch() throws Exception {
    AuditEventDAO auditEventDAO = mock(AuditEventDAO.class);
    AuditEvent auditEvent = mock(AuditEvent.class);
    when(auditEvent.getId()).thenReturn(null);

    when(auditEventDAO.insert(auditEvent)).thenThrow(new SQLException("sql fail"));

    AuditTrailConfiguration config = new AuditTrailConfiguration("TABLENAME","PROPTABLE","SEQNAME");
    AuditEventStorageImpl storage = new AuditEventStorageImpl(config);

    Field daoField = storage.getClass().getDeclaredField("auditEventDAO");
    daoField.setAccessible(true);
    daoField.set(storage, auditEventDAO);

    Exception ex = assertThrows(OperationServiceException.class,
        () -> invokeLogEvent(storage, auditEvent));
    assertTrue(ex.getMessage().contains("sql fail"));
}

@Test
void testLogEventRuntimeExceptionBranch() throws Exception {
    AuditEventDAO auditEventDAO = mock(AuditEventDAO.class);
    AuditEvent auditEvent = mock(AuditEvent.class);
    when(auditEvent.getId()).thenReturn(null);

    when(auditEventDAO.insert(auditEvent)).thenThrow(new RuntimeException("runtime fail"));

    AuditTrailConfiguration config = new AuditTrailConfiguration("TABLENAME","PROPTABLE","SEQNAME");
    AuditEventStorageImpl storage = new AuditEventStorageImpl(config);

    Field daoField = storage.getClass().getDeclaredField("auditEventDAO");
    daoField.setAccessible(true);
    daoField.set(storage, auditEventDAO);

    Exception ex = assertThrows(OperationServiceException.class,
        () -> invokeLogEvent(storage, auditEvent));
    assertTrue(ex.getMessage().contains("runtime fail"));
}
