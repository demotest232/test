@Test
    void testEqualsAndHashCode() {
        AuditEventProperty a = new AuditEventProperty("Name", "Value");
        AuditEventProperty b = new AuditEventProperty("Name", "Value");
        AuditEventProperty c = new AuditEventProperty("Other", "Value");

        // Reflexive
        assertTrue(a.equals(a));
        // Symmetric & consistent
        assertTrue(a.equals(b));
        assertTrue(b.equals(a));
        // Transitive: a==b, b==a
        // Negative case
        assertFalse(a.equals(c));
        // hashCode contract
        assertEquals(a.hashCode(), b.hashCode());
        // Different properties for hashCode
        assertNotEquals(a.hashCode(), c.hashCode());

        // Null safe
        assertFalse(a.equals(null));
        // Different type
        assertFalse(a.equals("string"));
    }

    @Test
    void testGettersAndSetters() {
        AuditEventProperty prop = new AuditEventProperty();
        prop.setId(10L);
        prop.setAuditEventId(100L);
        prop.setPropertyName("testName");
        prop.setPropertyValue("testValue");

        assertEquals(10L, prop.getId());
        assertEquals(100L, prop.getAuditEventId());
        assertEquals("testName", prop.getPropertyName());
        assertEquals("testValue", prop.getPropertyValue());
    }
