@Mock
    private ExtendedObjectFactory xmlFactory;

    @Mock
    private GridDataFactory<Object> gridDataFactory;

    @InjectMocks
    private GetGridDataHandler handler;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);     
        Map<String, GridDataFactory<?>> factories = new HashMap<>();
        factories.put("GridA", gridDataFactory);      
        setField(handler, "gridDataFactories", factories);
    }

    @Test
    void testExecuteCommand_HappyPath() {
     
        GenericCommand xmlValue = mock(GenericCommand.class);

        XmlGetGridDataCommand xmlGetGridDataCommand = mock(XmlGetGridDataCommand.class);
        XmlGridDataCommand resultCommand = mock(XmlGridDataCommand.class);

        GridCriterion criterion = mock(GridCriterion.class);
        when(criterion.getGridName()).thenReturn("GridA");

        when(xmlGetGridDataCommand.getGridCriteria()).thenReturn(List.of(criterion));    

      
        Object gridData = new Object();
        when(gridDataFactory.getGridData(criterion)).thenReturn(gridData);      
        XmlGridDataCommand result = handler.executeCommand(xmlValue);     
        verify(gridDataFactory, atLeastOnce()).getGridData(criterion);

      
        assertNotNull(result);
        assertTrue(result.getGrids().contains(gridData));
    }

    @Test
    void testExecuteCommand_NullFactorySkipped() {
      
        GenericCommand xmlValue = mock(GenericCommand.class);
        XmlGetGridDataCommand xmlGetGridDataCommand = mock(XmlGetGridDataCommand.class);
        GridCriterion criterion = mock(GridCriterion.class);
        when(criterion.getGridName()).thenReturn("MissingGrid");
        when(xmlGetGridDataCommand.getGridCriteria()).thenReturn(List.of(criterion));

        XmlGridDataCommand result = handler.executeCommand(xmlValue);

        assertNotNull(result);
        assertTrue(result.getGrids().isEmpty());
    }

  
    private static void setField(Object target, String fieldName, Object value) {
        try {
            var field = target.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(target, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
