  private CompressionFilter filter;
    private FilterChain mockChain;
    private HttpServletRequest mockRequest;
    private HttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        filter = new CompressionFilter();
        mockChain = mock(FilterChain.class);
        mockRequest = mock(HttpServletRequest.class);
        mockResponse = mock(HttpServletResponse.class);
    }

    @Test
    void testDoFilter_NoGzipHeader_ShouldNotWrap() throws IOException, ServletException {
        when(mockRequest.getHeaders("Accept-Encoding")).thenReturn(Collections.emptyEnumeration());
        filter.doFilter(mockRequest, mockResponse, mockChain);      
        verify(mockChain).doFilter(mockRequest, mockResponse);
    }

    @Test
    void testDoFilter_WithGzipHeader_ShouldWrapResponse() throws IOException, ServletException {
        Enumeration<String> gzipEnum = Collections.enumeration(Collections.singletonList("gzip"));
        when(mockRequest.getHeaders("Accept-Encoding")).thenReturn(gzipEnum);
      
        CompressionServletResponseWrapper[] usedWrapper = new CompressionServletResponseWrapper[1];
        FilterChain capturingChain = (req, res) -> {         
            assertTrue(res instanceof CompressionServletResponseWrapper);
            usedWrapper[0] = (CompressionServletResponseWrapper) res;
        };
        
        filter.doFilter(mockRequest, mockResponse, capturingChain);       
        assertNotNull(usedWrapper[0]);      
        assertNotNull(usedWrapper[0].getOutputStream());
        assertNotNull(usedWrapper[0].getWriter());
    }

    @Test
    void testDoFilter_RequestNotHttpServlet_ShouldNotWrap() throws IOException, ServletException {
        ServletRequest plainRequest = mock(ServletRequest.class);
        ServletResponse plainResponse = mock(ServletResponse.class);
        filter.doFilter(plainRequest, plainResponse, mockChain);
        verify(mockChain).doFilter(plainRequest, plainResponse);
    }
