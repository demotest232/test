import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class GetGridDataHandlerTest {

    @Mock
    private ExtendedObjectFactory xmlFactory;

    @Mock
    private GridDataFactory<?> gridDataFactory;

    @InjectMocks
    private GetGridDataHandler handler;

    private Map<String, GridDataFactory<?>> gridDataFactories;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        gridDataFactories = new HashMap<>();
        gridDataFactories.put("TestCriterion", gridDataFactory);
        handler.gridDataFactories = gridDataFactories;
    }

    @Test
    void testExecuteCommand() {
        // Arrange: create mock GenericCommand and XmlGetGridDataCommand
        GenericCommand mockXmlValue = mock(GenericCommand.class);
        XmlGetGridDataCommand mockCommand = mock(XmlGetGridDataCommand.class);

        when(mockXmlValue.getClass()).thenReturn(GenericCommand.class);
        when(mockCommand.getGridCriteria()).thenReturn(List.of("TestCriterion"));
        when(gridDataFactory.getGridName()).thenReturn("TestGrid");

        // Act: Call the method under test
        XmlGridDataCommand result = handler.executeCommand(mockXmlValue);

        // Assert: Verify expected behavior/outputs
        assertNotNull(result);
        verify(gridDataFactory, times(1)).getGridName();
    }
}
