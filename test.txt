@Test
void testStoreEvent() throws Exception {
    AuditTrailConfiguration config = new AuditTrailConfiguration("AUDIT_TABLE", "AUDIT_PROP_TABLE", "AUDIT_SEQ");
    AuditEventStorageImpl storage = new AuditEventStorageImpl(config);

    // Mock dependencies
    AuditEvent auditEvent = mock(AuditEvent.class);
    Connection jdbcConnection = mock(Connection.class);
    ConnectionHolderImpl connectionHolder = mock(ConnectionHolderImpl.class);
    AuditEventDAO auditEventDAO = mock(AuditEventDAO.class);

    // Inject mocked connectionHolder and DAO, since these are private final fields
    Field connField = storage.getClass().getDeclaredField("connection");
    connField.setAccessible(true);
    connField.set(storage, connectionHolder);

    Field daoField = storage.getClass().getDeclaredField("auditEventDAO");
    daoField.setAccessible(true);
    daoField.set(storage, auditEventDAO);

    doNothing().when(connectionHolder).setConnection(jdbcConnection);
    doNothing().when(connectionHolder).resetConnection();

    // When auditEvent.getId() returns null, triggers insert
    when(auditEvent.getId()).thenReturn(null);
    when(auditEventDAO.insert(auditEvent)).thenReturn(999L);

    // Act
    Long result = storage.storeEvent(auditEvent, jdbcConnection);

    // Assert
    verify(connectionHolder).setConnection(jdbcConnection);
    verify(connectionHolder).resetConnection();
    verify(auditEventDAO).insert(auditEvent);
    assertEquals(999L, result);

    // Also test branch when update is called
    reset(auditEventDAO);
    when(auditEvent.getId()).thenReturn(888L);
    when(auditEventDAO.update(auditEvent)).thenReturn(888L);

    Long updateResult = storage.storeEvent(auditEvent, jdbcConnection);
    verify(auditEventDAO).update(auditEvent);
    assertEquals(888L, updateResult);
}
