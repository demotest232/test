// Get Paths for export
public static List<String> pathsForDMExport(GitHubUtility gitUtil,
                                            Collection<String> tagList,
                                            final Set<String> missingTags,
                                            InputData inputData) throws Exception {

    List<String> exportPathList = new ArrayList<>();

    for (String tag : tagList) {
        String path = GitHubUtility.getReleaseNumber(tag)
                + IConstants.URL_SEPARATOR
                + tag
                + IConstants.URL_SEPARATOR
                + IConstants.DM_FOLDER;

        System.out.println("Path = " + path);

        try {
            // Get repository object
            GHRepository repo = gitUtil.getRepository(
                    inputData.getGitOrgName(),
                    inputData.getDbRequestPath());

            // Fetch recursive tree for given branch
            GHTree tree = repo.getTreeRecursive(inputData.getDbRequestBranch(), 1);

            if (tree == null || tree.getTree().isEmpty()) {
                throw new Exception(path + " Not Found!!");
            }

            // Filter entries by given path (GitHub doesnâ€™t accept path param directly)
            for (GHTreeEntry entry : tree.getTree()) {
                if (entry.getPath().startsWith(path)) {
                    // Fetch file content if needed
                    GHContent fileContent = repo.getFileContent(entry.getPath(), inputData.getDbRequestBranch());

                    // Example: store file path
                    exportPathList.add(entry.getPath());
                }
            }

        } catch (Exception e) {
            System.out.println(path + " Not Found!!");
            missingTags.remove(tag);
            continue;
        }
    }

    return exportPathList;
}
