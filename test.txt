private CompressionFilter filter;
    private FilterChain mockChain;
    private ServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        filter = new CompressionFilter();
        mockChain = mock(FilterChain.class);
        mockResponse = mock(ServletResponse.class);
    }

    @Test
    void testDoFilterWithoutGzipHeader() throws IOException, ServletException {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        Enumeration<String> emptyEnum = Collections.emptyEnumeration();
        when(mockRequest.getHeaders("Accept-Encoding")).thenReturn(emptyEnum);

        filter.doFilter(mockRequest, mockResponse, mockChain);

        // Expect filter just passes through (supportsCompression should be false)
        verify(mockChain, times(1)).doFilter(mockRequest, mockResponse);
    }

    @Test
    void testDoFilterWithGzipHeader() throws IOException, ServletException {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        Enumeration<String> enumWithGzip = Collections.enumeration(Collections.singletonList("gzip, deflate"));
        when(mockRequest.getHeaders("Accept-Encoding")).thenReturn(enumWithGzip);

        filter.doFilter(mockRequest, mockResponse, mockChain);

        // Expect filter passes through, but supportCompression would be true in filter
        verify(mockChain, times(1)).doFilter(mockRequest, mockResponse);
    }

    @Test
    void testDoFilterNonHttpServletRequest() throws IOException, ServletException {
        ServletRequest mockRequest = mock(ServletRequest.class);
        filter.doFilter(mockRequest, mockResponse, mockChain);
        // Should simply go through chain, nothing special
        verify(mockChain, times(1)).doFilter(mockRequest, mockResponse);
    }
